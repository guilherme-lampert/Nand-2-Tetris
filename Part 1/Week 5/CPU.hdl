// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
    // Mux 1
    Mux16(a=instruction, b=outALU, sel=instruction[15], out=outMux1);
    
    // Not 1 | Or 1 | A Register
    Not(in=instruction[15], out=outNot1);
    Or(a=outNot1, b=instruction[5], out=outOr1);
    ARegister(in=outMux1, load=outOr1, out[0..14]=addressM, out=outARegister);

    // And 1 | D Register
    And(a=instruction[15], b=instruction[4], out=outAnd1);
    DRegister(in=outALU, load=outAnd1, out=outDRegister);

    // And 2 | Mux 2
    And(a=instruction[15], b=instruction[12], out=outAnd2);
    Mux16(a=outARegister, b=inM, sel=outAnd2, out=outMux2);

    // ALU
    ALU(x=outDRegister, y=outMux2, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=outALU, out=outM, zr=outZR, ng=outNG);
    
    // Not outNG | Not outZR
    Not(in=outNG, out=notOutNG);
    Not(in=outZR, out=notOutZR);

    // j3
    And(a=instruction[0], b=notOutZR, out=j3And1);
    And(a=j3And1, b=notOutNG, out=j3And2);
    
    // j2
    And(a=instruction[1], b=outZR, out=j2And1);
    
    // j1
    And(a=instruction[2], b=outNG, out=j1And1);

    // Checking if load is true
    Or(a=j3And2, b=j2And1, out=outOr2);
    Or(a=outOr2, b=j1And1, out=outOr3);
    And(a=instruction[15], b=outOr3, out=loadPC);
    
    // Checking if inc is true
    Not(in=loadPC, out=notLoadPC);

    // PC
    PC(in=outARegister, load=loadPC, inc=notLoadPC, reset=reset, out[0..14]=pc);

    // Write M
    And(a=instruction[15], b=instruction[3], out=writeM);
}
