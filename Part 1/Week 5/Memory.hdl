// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/Memory.hdl
/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load=1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid and reads 0. Access to any address
 * in the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the Screen
 * and Keyboard chip specifications given in the lectures and the book.
 */
CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    // Selecting which part is going to be loaded
    DMux4Way(in=load, sel=address[13..14], a=loadR1, b=loadR2, c=loadS, d=loadK);
    
    // RAM
    Or(a=loadR1, b=loadR2, out=loadR);
    RAM16K(in=in, load=loadR, address=address[0..13], out=outR);

    // Screen
    Screen(in=in, load=loadS, address=address[0..12], out=outS);

    // Keyboard - Notice that here I'm assuring that the keyboard will be outputed ONLY if the correct address is selected
    Or8Way(in=address[0..7], out=outOr1);
    Or(a=outOr1, b=address[8], out=outOr2);
    Or(a=outOr2, b=address[9], out=outOr3);
    Or(a=outOr3, b=address[10], out=outOr4);
    Or(a=outOr4, b=address[11], out=outOr5);
    Or(a=outOr5, b=address[12], out=outOr6);
    Keyboard(out=outK1);
    Mux16(a=outK1, b=false, sel=outOr6, out=outK);

    // Selecting the correct output
    Mux4Way16(a=outR, b=outR, c=outS, d=outK, sel=address[13..14], out=out);
}
